/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class XwordBuilderTest {
    @Test
    public void testEmptyGrid() throws IOException {
        Path path = Paths.get("/Users/sszuflita/Downloads/XwiWordList.txt");
        CrosswordBuilder builder = CrosswordBuilder.fromPath(path);

        Tile[][] base = new Tile[][]{
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY}
        };

        List<Crossword> crosswords = builder.solveFromGrid(new Crossword(base));

        Crossword expected = new Crossword(new Tile[][]{
                new Tile[]{ Tile.A, Tile.A, Tile.A},
                new Tile[]{ Tile.A, Tile.A, Tile.A},
                new Tile[]{ Tile.A, Tile.A, Tile.A}
        });

        Assert.assertTrue(crosswords.get(0).equals(expected));
    }

    @Test
    public void testNonEmptyGrid() throws IOException {
        Path path = Paths.get("/Users/sszuflita/Downloads/XwiWordList.txt");
        CrosswordBuilder builder = CrosswordBuilder.fromPath(path);

        Tile[][] base = new Tile[][]{
                new Tile[]{ Tile.A, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY}
        };

      Crossword expected = new Crossword(new Tile[][]{
                new Tile[]{ Tile.A, Tile.A, Tile.A},
                new Tile[]{ Tile.A, Tile.A, Tile.A},
                new Tile[]{ Tile.A, Tile.A, Tile.A}
      });

      List<Crossword> crosswords = builder.solveFromGrid(new Crossword(base));

      Assert.assertTrue(crosswords.get(0).equals(expected));
    }

        @Test
    public void testNonEmptyGridWithB() throws IOException {
        Path path = Paths.get("/Users/sszuflita/Downloads/XwiWordList.txt");
        CrosswordBuilder builder = CrosswordBuilder.fromPath(path);

        Tile[][] base = new Tile[][]{
                new Tile[]{ Tile.B, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.EMPTY, Tile.EMPTY, Tile.EMPTY},
                new Tile[]{ Tile.R, Tile.EMPTY, Tile.EMPTY}
        };

        Crossword expected = new Crossword(new Tile[][]{
                new Tile[]{ Tile.B, Tile.A, Tile.A},
                new Tile[]{ Tile.A, Tile.A, Tile.A},
                new Tile[]{ Tile.R, Tile.A, Tile.A}
        });

        List<Crossword> crosswords = builder.solveFromGrid(new Crossword(base));

        Assert.assertTrue(crosswords.get(0).equals(expected));
    }
}
